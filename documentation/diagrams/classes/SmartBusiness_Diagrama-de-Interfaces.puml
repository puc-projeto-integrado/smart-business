@startuml
title "SmartBusiness - Diagrama de Interfaces"

interface UserService{
    + getUsers() Collection
    + getUserById(id) Collection
    + updateUser(Request) int
    + deleteUser(Request) int
}

interface BusinessService{
    + getBusiness() Collection
    + getBusinessByCity(int) Collection
    + getBusinessByState(int) Collection
    + getBusinessById(int) Collection
    + getBusinessByUser(int) Collection
    + getBusinessByCategory(int) Collection
    + getBusinessHighlights() Collection
    + addBusiness(Request) void
    + deleteBusiness(Request) int
    + updateBusiness(Request) int
}

interface ProposalService{
    + getProposalByOwner(int) Collection
    + getProposalByRequester(int) Collection
    + getProposalByStatus(int, string) Collection
    + addProposal(Request) void
    + deleteProposal(Request) void
    + updateProposalStatus(Request) void
}

interface StateService{
    + getState() Collection
    + getStateById(int) Collection
    + addState(Request) void
    + updateState(Request) int
    + deleteState(Request) int
}

interface CityService{
    + getCity() Collection
    + getCityByState(int) Collection
}

interface CategoryService{
    + getCategories() Collection
    + getCategoryById(int) Collection
    + updateCategory(Request) int
    + addCategory(string) void
    + deleteCategory(int) int
}

interface StatsService{
    + getStatsByCateogry() Collection
    + getStatsByCity() Collection
    + getStatsByState() Collection
    + getStatsByFavorite() Collection
    + getStatsByRegisters() Collection
}

interface FavoriteService {
    + favoriteUser(int) Collection
    + favoriteExists(int, int) Collection
    + favoriteDelete(int) int
}

interface AuthService{
    + login() JsonResponse
    + sendHttpStatusCode()
    + getCredentials() Array
    + getBearerToken() String
    + addUser() JsonResponse
    + social()
}

interface RoleService{
    + addRoleAndActions(Request) void
    + addRole(Request) int
    + addRoleActions(Request, int) void
    + deleteRole(int) int
    + getRoles() Collection
    + getRoleById(int) Collection
}

interface RoleActionService{
    + getRoleActionsByRoleId(int) Collection
}

interface PdfService{
    + htmlBuilder(array, int) string
}

interface PermissionService{
    + hasPermission(string) Boolean
    + getUserRoleId(string) int
    + getPermissionsRoutes(string) Array
    + getUserPermissions(string) Collection
    + getUserId(string) int
    + getUserDataFromToken(string) Collection
}

@enduml