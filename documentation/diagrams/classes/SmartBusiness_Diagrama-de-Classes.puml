@startuml
title "SmartBusiness - Diagrama de Classes"

class Model

package App {

    package Model{
        class User{
            #  fillable Array
            # hidden Array
            # casts Array
        }
        class Favorite{
            + Collection favoritesUser()
            + Collection favoriteExists()
        }
        class State
        class City
        class Business
        class Proposal
        class Category
        class Role
        class RoleAction
        class Model
    }

    package Http {

        package Controllers {

            class Controller{
                #jsonResponseinUtf8
            }

            package API {
                class UserController{
                    +  index()
                    +  add()
                    +  delete()
                    +  update()
                }

                class BusinessController{
                    - Array defaultFields
                    +  index()
                    +  show()
                    +  byState()
                    +  byCity()
                    +  byUser()
                    +  byCategory()
                    +  highlights()
                    +  add()
                    +  delete()
                    +  update()
                }

                class ProposalController{
                    - Array defaultFields
                    +  byStatus()
                    +  byRequester()
                    +  byOwner()
                    +  add()
                    +  delete()
                    +  update()
                }

                class StateController{
                    +  index()
                    +  add()
                    +  delete()
                    +  update()
                }

                class CityController{
                    +  index()
                    +  add()
                    +  delete()
                    +  update()
                    +  citiesByState()
                }

                class CategoryController{
                    +  index()
                    +  add()
                    +  delete()
                    +  update()
                }

                class StatsController{
                    +  byCategory()
                    +  byCity()
                    +  byState()
                    +  byFavorite()
                    +  byRegister()
                }

                class FavoriteController {
                    + show()
                    + add()
                    + delete()
                }

                class AuthController{
                    - baseUrl
                    - tokenUrl
                    - Boolean validate()
                    -  clientExceptionHandler()
                    + construct()
                    +  login()
                    +  sendHttpStatusCode()
                    + Array getCredentials()
                    + String getBearerToken()
                    +  addUser()
                }
                class PdfController {
                    + byCity()
                    + byState()
                    - toPdf(string)
                }
                class RoleActionController {
                    + byRoleId(int)
                }
                class RoleController {
                    + index()
                    + add(int)
                    + show(Request)
                    + delete(Request)
                }
            }
        }
    }
    package Middleware{
        class Permissions{}
    }

    package Service{
        interface UserService{
            + getUsers() Collection
            + getUserById(id) Collection
            + updateUser(Request) int
            + deleteUser(Request) int
        }

        interface BusinessService{
            + getBusiness() Collection
            + getBusinessByCity(int) Collection
            + getBusinessByState(int) Collection
            + getBusinessById(int) Collection
            + getBusinessByUser(int) Collection
            + getBusinessByCategory(int) Collection
            + getBusinessHighlights() Collection
            + addBusiness(Request) void
            + deleteBusiness(Request) int
            + updateBusiness(Request) int
        }

        interface ProposalService{
            + getProposalByOwner(int) Collection
            + getProposalByRequester(int) Collection
            + getProposalByStatus(int, string) Collection
            + addProposal(Request) void
            + deleteProposal(Request) void
            + updateProposalStatus(Request) void
        }

        interface StateService{
            + getState() Collection
            + getStateById(int) Collection
            + addState(Request) void
            + updateState(Request) int
            + deleteState(Request) int
        }

        interface CityService{
            + getCity() Collection
            + getCityByState(int) Collection
        }

        interface CategoryService{
            + getCategories() Collection
            + getCategoryById(int) Collection
            + updateCategory(Request) int
            + addCategory(string) void
            + deleteCategory(int) int
        }

        interface StatsService{
            + getStatsByCateogry() Collection
            + getStatsByCity() Collection
            + getStatsByState() Collection
            + getStatsByFavorite() Collection
            + getStatsByRegisters() Collection
        }

        interface FavoriteService {
            + favoriteUser(int) Collection
            + favoriteExists(int, int) Collection
            + favoriteDelete(int) int
        }

        interface AuthService{
            + login() JsonResponse
            + sendHttpStatusCode()
            + getCredentials() Array
            + getBearerToken() String
            + addUser() JsonResponse
            + social()
        }

        interface RoleService{
            + addRoleAndActions(Request) void
            + addRole(Request) int
            + addRoleActions(Request, int) void
            + deleteRole(int) int
            + getRoles() Collection
            + getRoleById(int) Collection
        }

        interface RoleActionService{
            + getRoleActionsByRoleId(int) Collection
        }

        interface PdfService{
            + htmlBuilder(array, int) string
        }

        interface PermissionService{
            + hasPermission(string) Boolean
            + getUserRoleId(string) int
            + getPermissionsRoutes(string) Array
            + getUserPermissions(string) Collection
            + getUserId(string) int
            + getUserDataFromToken(string) Collection
        }
    }
}

Controller <|-- UserController
Controller <|-- BusinessController
Controller <|-- ProposalController
Controller <|-- StateController
Controller <|-- CityController
Controller <|-- CategoryController
Controller <|-- FavoriteController
Controller <|-- StatsController
Controller <|-- RoleController
Controller <|-- RoleActionController

UserService *---u UserController
User *---u UserService

BusinessService *---u BusinessController
Business *---u BusinessService

ProposalService *---u ProposalController
Proposal *---u ProposalService

FavoriteService *---u FavoriteController
Favorite *---u FavoriteService

CategoryService *---u CategoryController
Category *---u CategoryService

StateService *---u StateController
State *---u StateService

CityService *---u CityController
City *---u CityService

AuthService *---u AuthController
User *---u AuthService

PermissionService *---u Permissions
User *---u PermissionService

StatsService *---u StatsController
Business *---u StatsService

PdfService *---u PdfController

BusinessService *---u StatsController

RoleService *---u RoleController
Role *---u RoleService

RoleActionService *---u RoleActionController
RoleAction *---u RoleActionService

Model <|---u State
Model <|---u City
Model <|---u Category
Model <|---u Favorite
Model <|---u User
Model <|---u Business
Model <|---u Proposal
Model <|---u RoleAction

@enduml